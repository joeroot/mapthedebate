<!DOCTYPE html>
<html>

	<head>
		<title>Map The Debate</title>
		<script type="text/javascript" src="http://use.typekit.com/ovv8leg.js"></script>
		<script type="text/javascript">try{Typekit.load();}catch(e){}</script>
		<script type="text/javascript" src="/js/processing.js"></script> 
		<script type="text/javascript" src="/js/processing.init.js"></script>
		<script type="text/javascript" src="/js/jquery-1.5.min.js"></script>
		<!--		<script type="text/javascript" src="/js/raphael-min.js"></script>
		<script type="text/javascript" src="/js/raphael.visualisation.js"></script>-->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" />
		<link rel="stylesheet" href="/css/960.css" type="text/css" />
		<link rel="stylesheet" href="/css/map.css" type="text/css" />
	</head>
	
	<body>

		<div class="header">
			<div id="logo">
				<h3>Map the Debate</h3>
			</div>
			<div class="tags">
				<h6>
				<a href="#">1</a> 
				<a href="#">2</a> 
				<a href="#">3</a>
				<a href="#">4</a> 
				<a href="#">5</a> 
				<!--<a href="#">6</a> 
				<a href="#">7</a>
				<a href="#">8</a> 
				<a href="#">9</a> 
				<a href="#">10</a>-->
				</h6>
			</div>
			<div class="clear"></div>
		</div>

		<script type="application/processing">
		/* 
		  PROCESSINGJS.COM - BASIC EXAMPLE
		  Delayed Mouse Tracking  
		  MIT License - Hyper-Metrix.com/F1LT3R
		  Native Processing compatible 
		*/ 

		// Global variables
		float radius = 8.0;
		var tweets=[];
		var width;
		var height;
		var focussed = -1;
		var focussed_frame = 0;
		var zoomed = -1;
		var topics_count = {};
		var topics;
		var show_polarity = true;
		var topic_x = 100;
		var topic_y = 100;
		var show_topic="none";
		
		
		// Setup the Processing Canvas
		void setup(){
			width = window.innerWidth;
			height = window.innerHeight-65;
			size( width, height );
			frameRate( 30 );
			$.get('http://localhost:4567/api/results.json?rpp=800', function(json){
			  // results = data["results"];
				json = $.parseJSON(json);
				tweets = json["results"];
				topics = json["topics"];
			  for (i=0; i<tweets.length; i++) {
					tweet = tweets[i];
					tweet.x = Math.floor(Math.random()*width);
					tweet.y = Math.floor(Math.random()*height);
					tweet.target_x = -1;
					tweet.target_y = -1;
					tweet.target_angle = -1;
					tweet.target_velocity = 4;
					tweet.angle = Math.random()*2*Math.PI;
					tweet.radius = 20;
					tweet.velocity = 0.5;
					tweet.grouped = false;
					tweet.in_topic = false;
				}
				$(".tags a").each(function(i){
					$(this).html(topics[i]);
					$(this).attr("href", '#'+topics[i]);
					$(this).show();
					$(this).click(function(){
						$(".tags a").removeClass("selected");
						href = $(this).attr("href");
						topic = href.substring(1,href.length);
						if (show_topic != topic) {
							show_topic = topic;
							for (i=0;i<tweets.length;i++) {
								tweet = tweets[i];
								tweet.in_topic = contains(tweet.topics,topic);
								console.log(topic);
								console.log(tweet.topics);
								console.log(tweet.in_topic);
							}
							$(this).addClass("selected");
							show_topic = topic;
						} else {
							for (i=0;i<tweets.length;i++) {
								tweet = tweets[i];
								tweet.in_topic = false;
							}
							show_topic = "none";
						}
						return false;
					});
				});
				
				draw();
			}); 
		}
		

		// Main draw loop
		void draw(){
			background(#050505);
			drawTweets();       
			fill(255,255,255,255);
			if (zoomed != -1) {
				$("#tweetoverlay").html(tweets[zoomed].text);
				$("#tweetoverlay").show(); 
			} else {
				$("#tweetoverlay").hide();
			}
		}
		
		function drawTweets(){
			for (i = 0; i < tweets.length; i++) {
				drawTweet(i,alpha);
			}
			focussed_frame++;
		}
		
		function drawTweet(i,alpha) {
			var tweet = tweets[i];
			
			if (tweet.x > (width+10)) tweet.x = tweet.x-width-18;
			if (tweet.y > (height+10)) tweet.y = tweet.y-height-18;
			if (tweet.x <= -10) tweet.x = tweet.x+width+18;
			if (tweet.y <= -10) tweet.y = tweet.y+height+18;
		
			var alpha = 255;
			if (show_topic != "none" && !tweet.in_topic && zoomed != i) {
				alpha=alpha*0.2;
			}
			if (zoomed != -1 && zoomed != i && focussed != i) {
				alpha = alpha=alpha*0.3;
			}
			
		  // Fill canvas grey

		  // Set fill-color to blue
			tweet.radius = radius;
			
			if (i == focussed) {
				radius_change = 6 * (sin( focussed_frame / 4 ));
				tweet.radius = radius*1.5 + radius_change;
			}
			
			if (tweet.polarity == "pos") {
			  fill(106,155,203,alpha);
			} else if (tweet.polarity == "neg") {
				fill(206,56,79,alpha);
			} else {
				fill(73,73,73,alpha);
			}
			
			if (!show_polarity) {
				if (tweet.emotions[0] == "anger") {
					fill(255,41,64,alpha);
				} else if (tweet.emotions[0] == "fear") {
				  fill(53,164,80,alpha);
				} else if (tweet.emotions[0] == "joy") {
					fill(237,197,0,alpha);
				} else if (tweet.emotions[0] == "sadness") {
					fill(114,157,201,alpha);
				} else if (tweet.emotions[0] == "surprise") {
				  fill(63,165,192,alpha);
				} else if (tweet.emotions[0] == "anticipation") {
					fill(255,168,67,alpha);
				} else if (tweet.emotions[0] == "trust") {
				  fill(138,225,85,alpha);
				} else if (tweet.emotions[0] == "disgust") {
				  fill(123,78,163,alpha);
				}
			}

			// if (tweet.target_x == -1 && tweet.target_y == -1) {
				if (focussed != i) {
					// tweet.angle = tweet.angle+(Math.random()-0.5)*0.1;
					tweet.x = tweet.x + Math.sin(tweet.angle) * tweet.velocity
					tweet.y = tweet.y + Math.cos(tweet.angle) * tweet.velocity
				} 
			// } else {
			// 	if (((tweet.x - tweet.target_x)<5) && ((tweet.y - tweet.target_y)<5)) {
			// 		tweet.x = tweet.target_x;
			// 		tweet.y = tweet.target_y;
			// 		console.log("THERE");
			//  				} else {
			// 		o =  tweet.x - tweet.target_x;
			// 		a = tweet.y - tweet.target_y;
			// 		tweet.target_angle = Math.atan(o/a);
			// 		to = Math.sin(tweet.target_angle) * tweet.target_velocity;
			// 		ta = Math.cos(tweet.target_angle) * tweet.target_velocity;
			// 		tweet.x = tweet.x - to
			// 		tweet.y = tweet.y - ta;
			// 	}
			// 	console.log(tweet.x)
			// 	console.log(tweet.y)
			// 	fill(255,255,255,alpha);
			// }

			

		  // Draw circle
			noStroke();
		  ellipse( tweet.x, tweet.y, tweet.radius, tweet.radius );
		}


		// Set circle's next destination
		void mouseMoved(){
			prev = focussed;
			focussed = -1;
			for (i = 0; i < tweets.length; i++) {
				tx = tweets[i].x;
				ty = tweets[i].y;  
				r = radius/2;
				mx = mouseX;
				my = mouseY;
				if (mx>=(tx-r) && mx<=(tx+r) && my>=(ty-r) && my<=(ty+r)) {
					focussed = i;
				}
			}
			if (focussed != prev) {
				focussed_frame = 0;
			}
		}

		void mousePressed(){
			if (focussed != -1) {
			  zoomed = focussed;
				if (zoomed != -1) {
					tweet = tweets[zoomed];
					$(".info .screen").html(tweet.user);
					if (tweet.emotions.length > 0) {
						$(".info .emotion").html(tweet.emotions[0]);
					} else {
						if (tweet.polarity=="pos") $(".info .emotion").html("positive");
						if (tweet.polarity=="neg") $(".info .emotion").html("negative");
					}
					$(".tweet h3").html(tweet.text);
					$(".image").attr("src", tweet.profile_image);
					$("#tweet_overlay").show();
				}
			} else {
				zoomed = -1;
				$("#tweet_overlay").hide();
				$(".info .screen").html("");
				$(".info .emotion").html("");
				$(".tweet h3").html("");
				$(".image").attr("src", "");
			}
		}
		
		function removeDuplicateElement(arrayName)
	  {
		  var newArray=new Array();
		  label:for(var i=0; i<arrayName.length;i++ ) {  
				for(var j=0; j<newArray.length;j++ ) {
					if(newArray[j]==arrayName[i]) 
						continue label;
					}
			newArray[newArray.length] = arrayName[i];
			}
			return newArray;
	  }
	
		function valueOrDefault(val, def) {
		    return val == undefined ? def : val;
		}
	
		function contains(array,val) {
			for (i=0; i<array.length; i++) {
				if (array[i] == val) {
					return true
				}
			}			
			return false;
		}
	
		$("#polarity").click(function(){
			$(this).toggleClass("selected");
			show_polarity = !show_polarity;
		});
		
		</script>
		<canvas id="map"></canvas>
			
		<div id="tweet_overlay">
			<img class="image" src="http://a1.twimg.com/sticky/default_profile_images/default_profile_2_bigger.png" />
			<div class="info">
				<h5 class="screen">@joeroot</h5>
				<h6 class="emotion">sadness, happiness, annoyance</h6>
			</div>
			<div class="tweet">
				<h3>this is reallt lonf hasjd waboe hjdc ah wiu qweui hikjnad jkh sjk sakjd i dadnkj a ask djhsjkdhsu hui wi diuas dkjs dsdhas hjsakdh wqjhqw</h3>
			</div>
			<div class="clear"></div>	
		</div>
		<div id="options"><h6><a class="button" id="polarity" href="#">P</a></h6></div>
	</body>

</html>